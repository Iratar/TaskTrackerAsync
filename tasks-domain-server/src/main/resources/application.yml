server:
  port: 8090

logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
  
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://auth-server:9000
  datasource:
    hikari:
      connectionTimeout: 20000
      maximumPoolSize: 5
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: password
  jpa:
    properties:
      hibernate:
        default_schema: task_domain
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    #hibernate:
      #ddl-auto: create-drop
  sql:
    init:
      mode: always
      schema-locations: classpath:/data.sql
      continue-on-error: true
  kafka:
    bootstrap-servers: pkc-7xoy1.eu-central-1.aws.confluent.cloud:9092
    properties:
      security:
        protocol: SASL_SSL
      sasl:
        jaas:
          config: org.apache.kafka.common.security.plain.PlainLoginModule required username='MLR6XUZ7EN5ZQFKP' password='Kj0Hstv741678qX6Igp4syXmoETmiFS25y9e8BaOlHQ1myPH2YAQa4MRrMLZ9a+V';
        mechanism: PLAIN
      # CCloud Schema Registry Connection parameter
      schema:
        registry:
          #url: https://pkc-7xoy1.eu-central-1.aws.confluent.cloud:443
          #basic.auth.credentials.source: USER_INFO
          #schema.registry.basic.auth.user.info: sr_ccloud_key:sr_ccloud_key 
          auto:
            register:
              schema: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: task:com.toughdevs.school.popugtasktracker.tasks.schema.Task
    consumer:
      group-id: group_id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            type:
              mapping: account:com.toughdevs.school.popugtasktracker.tasks.account.domain.Account
  cloud:
    stream:
      default: 
         producer: 
          useNativeEncoding: true
         consumer:  
          useNativeEncoding: true     
      bindings:
        input:
          destination: tasks-stream
          content-type: application/*+avro
          group: group-tasks
        output:
          destination: tasks-stream
          content-type: application/*+avro
      kafka:
          binder:        
           producer-properties:
             key:
               serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
             value:
               serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
             schema:
               registry:
                 url: http://localhost:8081
           consumer-properties:
             key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
             value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
             schema.registry.url: http://localhost:8081
             specific.avro.reader: true