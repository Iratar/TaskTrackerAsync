/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.toughdevs.school.popugtasktracker.tasks.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Sample schema to help you get started. */
@org.apache.avro.specific.AvroGenerated
public class Task_v2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9145040736718829055L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Task_v2\",\"namespace\":\"com.toughdevs.school.popugtasktracker.tasks.schema\",\"doc\":\"Sample schema to help you get started.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The string is a unicode character sequence.\"},{\"name\":\"publicId\",\"type\":\"string\",\"doc\":\"The double type is a double precision (64-bit) IEEE 754 floating-point number.\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"The string is a unicode character sequence.\"},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"The string is a unicode character sequence.\"},{\"name\":\"assignedTo\",\"type\":\"string\",\"doc\":\"The string is a unicode character sequence.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Task_v2> ENCODER =
      new BinaryMessageEncoder<Task_v2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Task_v2> DECODER =
      new BinaryMessageDecoder<Task_v2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Task_v2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Task_v2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Task_v2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Task_v2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Task_v2 from a ByteBuffer. */
  public static Task_v2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The string is a unicode character sequence. */
  @Deprecated public java.lang.CharSequence id;
  /** The double type is a double precision (64-bit) IEEE 754 floating-point number. */
  @Deprecated public java.lang.CharSequence publicId;
  /** The string is a unicode character sequence. */
  @Deprecated public java.lang.CharSequence description;
  /** The string is a unicode character sequence. */
  @Deprecated public java.lang.CharSequence status;
  /** The string is a unicode character sequence. */
  @Deprecated public java.lang.CharSequence assignedTo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Task_v2() {}

  /**
   * All-args constructor.
   * @param id The string is a unicode character sequence.
   * @param publicId The double type is a double precision (64-bit) IEEE 754 floating-point number.
   * @param description The string is a unicode character sequence.
   * @param status The string is a unicode character sequence.
   * @param assignedTo The string is a unicode character sequence.
   */
  public Task_v2(java.lang.CharSequence id, java.lang.CharSequence publicId, java.lang.CharSequence description, java.lang.CharSequence status, java.lang.CharSequence assignedTo) {
    this.id = id;
    this.publicId = publicId;
    this.description = description;
    this.status = status;
    this.assignedTo = assignedTo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return publicId;
    case 2: return description;
    case 3: return status;
    case 4: return assignedTo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: publicId = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: status = (java.lang.CharSequence)value$; break;
    case 4: assignedTo = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The string is a unicode character sequence.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The string is a unicode character sequence.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'publicId' field.
   * @return The double type is a double precision (64-bit) IEEE 754 floating-point number.
   */
  public java.lang.CharSequence getPublicId() {
    return publicId;
  }

  /**
   * Sets the value of the 'publicId' field.
   * The double type is a double precision (64-bit) IEEE 754 floating-point number.
   * @param value the value to set.
   */
  public void setPublicId(java.lang.CharSequence value) {
    this.publicId = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The string is a unicode character sequence.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * The string is a unicode character sequence.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The string is a unicode character sequence.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * The string is a unicode character sequence.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'assignedTo' field.
   * @return The string is a unicode character sequence.
   */
  public java.lang.CharSequence getAssignedTo() {
    return assignedTo;
  }

  /**
   * Sets the value of the 'assignedTo' field.
   * The string is a unicode character sequence.
   * @param value the value to set.
   */
  public void setAssignedTo(java.lang.CharSequence value) {
    this.assignedTo = value;
  }

  /**
   * Creates a new Task_v2 RecordBuilder.
   * @return A new Task_v2 RecordBuilder
   */
  public static com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder newBuilder() {
    return new com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder();
  }

  /**
   * Creates a new Task_v2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Task_v2 RecordBuilder
   */
  public static com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder newBuilder(com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder other) {
    return new com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder(other);
  }

  /**
   * Creates a new Task_v2 RecordBuilder by copying an existing Task_v2 instance.
   * @param other The existing instance to copy.
   * @return A new Task_v2 RecordBuilder
   */
  public static com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder newBuilder(com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2 other) {
    return new com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder(other);
  }

  /**
   * RecordBuilder for Task_v2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Task_v2>
    implements org.apache.avro.data.RecordBuilder<Task_v2> {

    /** The string is a unicode character sequence. */
    private java.lang.CharSequence id;
    /** The double type is a double precision (64-bit) IEEE 754 floating-point number. */
    private java.lang.CharSequence publicId;
    /** The string is a unicode character sequence. */
    private java.lang.CharSequence description;
    /** The string is a unicode character sequence. */
    private java.lang.CharSequence status;
    /** The string is a unicode character sequence. */
    private java.lang.CharSequence assignedTo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publicId)) {
        this.publicId = data().deepCopy(fields()[1].schema(), other.publicId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.assignedTo)) {
        this.assignedTo = data().deepCopy(fields()[4].schema(), other.assignedTo);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Task_v2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publicId)) {
        this.publicId = data().deepCopy(fields()[1].schema(), other.publicId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.assignedTo)) {
        this.assignedTo = data().deepCopy(fields()[4].schema(), other.assignedTo);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * The string is a unicode character sequence.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * The string is a unicode character sequence.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The string is a unicode character sequence.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * The string is a unicode character sequence.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'publicId' field.
      * The double type is a double precision (64-bit) IEEE 754 floating-point number.
      * @return The value.
      */
    public java.lang.CharSequence getPublicId() {
      return publicId;
    }

    /**
      * Sets the value of the 'publicId' field.
      * The double type is a double precision (64-bit) IEEE 754 floating-point number.
      * @param value The value of 'publicId'.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder setPublicId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.publicId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'publicId' field has been set.
      * The double type is a double precision (64-bit) IEEE 754 floating-point number.
      * @return True if the 'publicId' field has been set, false otherwise.
      */
    public boolean hasPublicId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'publicId' field.
      * The double type is a double precision (64-bit) IEEE 754 floating-point number.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder clearPublicId() {
      publicId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * The string is a unicode character sequence.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * The string is a unicode character sequence.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * The string is a unicode character sequence.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * The string is a unicode character sequence.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * The string is a unicode character sequence.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * The string is a unicode character sequence.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * The string is a unicode character sequence.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * The string is a unicode character sequence.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'assignedTo' field.
      * The string is a unicode character sequence.
      * @return The value.
      */
    public java.lang.CharSequence getAssignedTo() {
      return assignedTo;
    }

    /**
      * Sets the value of the 'assignedTo' field.
      * The string is a unicode character sequence.
      * @param value The value of 'assignedTo'.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder setAssignedTo(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.assignedTo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'assignedTo' field has been set.
      * The string is a unicode character sequence.
      * @return True if the 'assignedTo' field has been set, false otherwise.
      */
    public boolean hasAssignedTo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'assignedTo' field.
      * The string is a unicode character sequence.
      * @return This builder.
      */
    public com.toughdevs.school.popugtasktracker.tasks.schema.Task_v2.Builder clearAssignedTo() {
      assignedTo = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Task_v2 build() {
      try {
        Task_v2 record = new Task_v2();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.publicId = fieldSetFlags()[1] ? this.publicId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.assignedTo = fieldSetFlags()[4] ? this.assignedTo : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Task_v2>
    WRITER$ = (org.apache.avro.io.DatumWriter<Task_v2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Task_v2>
    READER$ = (org.apache.avro.io.DatumReader<Task_v2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
