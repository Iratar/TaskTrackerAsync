server:
  port: 9000

logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG

spring:
  security:
    oauth2:
      authorizationserver:
        issuer: http://auth-server:9000
        client:
          articles-client:
            registration:
              client-id: articles-client
              client-secret: "{noop}secret"
              client-name: Articles Client
              client-authentication-methods:
                - client_secret_basic
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - http://127.0.0.1:8080/login/oauth2/code/articles-client-oidc
                - http://127.0.0.1:8080/authorized
              scopes:
                - openid
                - articles.read
  datasource:
    hikari:
      connectionTimeout: 20000
      maximumPoolSize: 5
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: password
  jpa:
    properties:
      hibernate:
        default_schema: auth
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    #hibernate:
      #ddl-auto: create-drop
  sql:
    init:
      mode: always
      schema-locations: classpath:/data.sql
      continue-on-error: true
